require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');
const fs = require('fs');
const { testConnection } = require('./config/database');
const authRoutes = require('./routes/auth');
const geminiRoutes = require('./routes/gemini');
const blogRoutes = require('./routes/blog');
const { optionalAuth } = require('./middleware/auth');

const app = express();
const port = process.env.PORT || 3000;
const WEATHER_API_KEY = process.env.WEATHER_API_KEY;
const OPENWEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';

// Ki·ªÉm tra API key
if (!WEATHER_API_KEY) {
    console.error('‚ùå WEATHER_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
    console.error('üí° Vui l√≤ng th√™m WEATHER_API_KEY v√†o file .env');
    process.exit(1);
}

app.use(cors());
app.use(express.json());

// Static serve for uploads
const uploadsDir = path.join(__dirname, '..', 'uploads');
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
}
app.use('/uploads', express.static(uploadsDir));

// Test k·∫øt n·ªëi database khi kh·ªüi ƒë·ªông
testConnection();

// Auth routes
app.use('/api/auth', authRoutes);

// Gemini AI routes
app.use('/api/gemini', geminiRoutes);

// Blog routes
app.use('/api/blog', blogRoutes);

// API endpoint ƒë·ªÉ l·∫•y th·ªùi ti·∫øt theo t·ªça ƒë·ªô
app.get('/api/weather/coordinates', async (req, res) => {
    try {
        const { lat, lon } = req.query;
        
        if (!lat || !lon) {
            return res.status(400).json({ 
                error: 'Thi·∫øu th√¥ng tin t·ªça ƒë·ªô (lat, lon)' 
            });
        }

        // Validate t·ªça ƒë·ªô
        const latNum = parseFloat(lat);
        const lonNum = parseFloat(lon);
        
        if (isNaN(latNum) || isNaN(lonNum)) {
            return res.status(400).json({ 
                error: 'T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá' 
            });
        }

        if (latNum < -90 || latNum > 90 || lonNum < -180 || lonNum > 180) {
            return res.status(400).json({ 
                error: 'T·ªça ƒë·ªô n·∫±m ngo√†i ph·∫°m vi h·ª£p l·ªá' 
            });
        }

        const response = await axios.get(`${OPENWEATHER_API_URL}/weather`, {
            params: {
                lat: latNum,
                lon: lonNum,
                appid: WEATHER_API_KEY,
                units: 'metric',
                lang: 'vi'
            },
            timeout: 10000 // 10 gi√¢y timeout
        });

        res.json(response.data);
    } catch (error) {
        console.error('L·ªói khi l·∫•y th·ªùi ti·∫øt theo t·ªça ƒë·ªô:', error.message);
        
        if (error.response) {
            // L·ªói t·ª´ OpenWeather API
            if (error.response.status === 401) {
                return res.status(500).json({ 
                    error: 'API key kh√¥ng h·ª£p l·ªá' 
                });
            }
            if (error.response.status === 429) {
                return res.status(429).json({ 
                    error: 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau' 
                });
            }
        }
        
        if (error.code === 'ECONNABORTED') {
            return res.status(408).json({ 
                error: 'Y√™u c·∫ßu h·∫øt th·ªùi gian ch·ªù' 
            });
        }
        
        res.status(500).json({ 
            error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt' 
        });
    }
});

// API endpoint ƒë·ªÉ l·∫•y th·ªùi ti·∫øt theo t√™n th√†nh ph·ªë
app.get('/api/weather/city', async (req, res) => {
    try {
        const { city } = req.query;
        
        if (!city) {
            return res.status(400).json({ 
                error: 'Thi·∫øu t√™n th√†nh ph·ªë' 
            });
        }

        // Validate t√™n th√†nh ph·ªë
        if (typeof city !== 'string' || city.trim().length === 0) {
            return res.status(400).json({ 
                error: 'T√™n th√†nh ph·ªë kh√¥ng h·ª£p l·ªá' 
            });
        }

        const response = await axios.get(`${OPENWEATHER_API_URL}/weather`, {
            params: {
                q: city.trim(),
                appid: WEATHER_API_KEY,
                units: 'metric',
                lang: 'vi'
            },
            timeout: 10000
        });

        res.json(response.data);
    } catch (error) {
        console.error('L·ªói khi l·∫•y th·ªùi ti·∫øt theo th√†nh ph·ªë:', error.message);
        
        if (error.response) {
            if (error.response.status === 404) {
                return res.status(404).json({ 
                    error: 'Kh√¥ng t√¨m th·∫•y th√†nh ph·ªë' 
                });
            }
            if (error.response.status === 401) {
                return res.status(500).json({ 
                    error: 'API key kh√¥ng h·ª£p l·ªá' 
                });
            }
            if (error.response.status === 429) {
                return res.status(429).json({ 
                    error: 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau' 
                });
            }
        }
        
        if (error.code === 'ECONNABORTED') {
            return res.status(408).json({ 
                error: 'Y√™u c·∫ßu h·∫øt th·ªùi gian ch·ªù' 
            });
        }
        
        res.status(500).json({ 
            error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt' 
        });
    }
});

// API endpoint ƒë·ªÉ l·∫•y d·ª± b√°o th·ªùi ti·∫øt 5 ng√†y
app.get('/api/forecast', async (req, res) => {
    try {
        const { lat, lon, city } = req.query;
        
        let params = {
            appid: WEATHER_API_KEY,
            units: 'metric',
            lang: 'vi'
        };

        if (lat && lon) {
            // Validate t·ªça ƒë·ªô
            const latNum = parseFloat(lat);
            const lonNum = parseFloat(lon);
            
            if (isNaN(latNum) || isNaN(lonNum)) {
                return res.status(400).json({ 
                    error: 'T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá' 
                });
            }

            if (latNum < -90 || latNum > 90 || lonNum < -180 || lonNum > 180) {
                return res.status(400).json({ 
                    error: 'T·ªça ƒë·ªô n·∫±m ngo√†i ph·∫°m vi h·ª£p l·ªá' 
                });
            }

            params.lat = latNum;
            params.lon = lonNum;
        } else if (city) {
            // Validate t√™n th√†nh ph·ªë
            if (typeof city !== 'string' || city.trim().length === 0) {
                return res.status(400).json({ 
                    error: 'T√™n th√†nh ph·ªë kh√¥ng h·ª£p l·ªá' 
                });
            }
            params.q = city.trim();
        } else {
            return res.status(400).json({ 
                error: 'C·∫ßn cung c·∫•p t·ªça ƒë·ªô (lat, lon) ho·∫∑c t√™n th√†nh ph·ªë' 
            });
        }

        const response = await axios.get(`${OPENWEATHER_API_URL}/forecast`, {
            params,
            timeout: 10000
        });

        res.json(response.data);
    } catch (error) {
        console.error('L·ªói khi l·∫•y d·ª± b√°o th·ªùi ti·∫øt:', error.message);
        
        if (error.response) {
            if (error.response.status === 404) {
                return res.status(404).json({ 
                    error: 'Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm' 
                });
            }
            if (error.response.status === 401) {
                return res.status(500).json({ 
                    error: 'API key kh√¥ng h·ª£p l·ªá' 
                });
            }
            if (error.response.status === 429) {
                return res.status(429).json({ 
                    error: 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau' 
                });
            }
        }
        
        if (error.code === 'ECONNABORTED') {
            return res.status(408).json({ 
                error: 'Y√™u c·∫ßu h·∫øt th·ªùi gian ch·ªù' 
            });
        }
        
        res.status(500).json({ 
            error: 'Kh√¥ng th·ªÉ l·∫•y d·ª± b√°o th·ªùi ti·∫øt' 
        });
    }
});

// API endpoint ƒë·ªÉ t√¨m ki·∫øm th√†nh ph·ªë
app.get('/api/search', async (req, res) => {
    try {
        const { q } = req.query;
        
        if (!q) {
            return res.status(400).json({ 
                error: 'Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm' 
            });
        }

        // Validate t·ª´ kh√≥a t√¨m ki·∫øm
        if (typeof q !== 'string' || q.trim().length === 0) {
            return res.status(400).json({ 
                error: 'T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá' 
            });
        }

        const response = await axios.get('http://api.openweathermap.org/geo/1.0/direct', {
            params: {
                q: q.trim(),
                limit: 5,
                appid: WEATHER_API_KEY
            },
            timeout: 10000
        });

        res.json(response.data);
    } catch (error) {
        console.error('L·ªói khi t√¨m ki·∫øm th√†nh ph·ªë:', error.message);
        
        if (error.response) {
            if (error.response.status === 401) {
                return res.status(500).json({ 
                    error: 'API key kh√¥ng h·ª£p l·ªá' 
                });
            }
            if (error.response.status === 429) {
                return res.status(429).json({ 
                    error: 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau' 
                });
            }
        }
        
        if (error.code === 'ECONNABORTED') {
            return res.status(408).json({ 
                error: 'Y√™u c·∫ßu h·∫øt th·ªùi gian ch·ªù' 
            });
        }
        
        res.status(500).json({ 
            error: 'Kh√¥ng th·ªÉ t√¨m ki·∫øm th√†nh ph·ªë' 
        });
    }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: 'Weather API ƒëang ho·∫°t ƒë·ªông',
        timestamp: new Date().toISOString()
    });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('L·ªói server:', err.stack);
    res.status(500).json({ 
        error: 'C√≥ l·ªói x·∫£y ra tr√™n server' 
    });
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({ 
        error: 'API endpoint kh√¥ng t·ªìn t·∫°i' 
    });
});

app.listen(port, () => {
    console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${port}`);
    console.log(`API Health check: http://localhost:${port}/api/health`);
});
